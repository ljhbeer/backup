
一、分组在正则中用()表示，根据小菜理解，分组的作用有两个： 
       1、  将某些规律看成是一组，然后进行组级别的重复，可以得到意想不到的效果。
       2、  分组之后，可以通过后向引用简化表达式。
  例如：第一个作用，对于IP地址的匹配，简单的可以写为如下形式：
       \d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}
       但仔细观察，我们可以发现一定的规律，可以把.\d{1,3}看成一个整体，也就是把他们看成一组，再把这个组重复3次即可。表达式如下：
       \d{1,3}(.\d{1,3}){3}
       这样一看，就比较简洁了。

       第二个作用，就拿匹配<title>xxx</title>标签来说，简单的正则可以这样写：
       <title>.*</title>
       可以看出，上边表达式中有两个title，完全一样，其实可以通过分组简写。表达式如下：
       <(title)>.*</\1>

       这个例子实际上就是 反向引用 的实际应用。对于分组而言，整个表达式永远算作第0组，在本例中，从左到右，依次为分组编号，因此，(title)是第1组。
       用\1这种语法，可以引用某组的文本内容，\1当然就是引用第1组的文本内容了，这样一来，就可以简化正则表达式，只写一次title，把它放在组里，然后在后边引用即可。
       以此为启发，我们可不可以简化刚刚的IP地址正则表达式呢？原来的表达式为\d{1,3}(.\d{1,3}){3}，里边的\d{1,3}重复了两次，如果利用后向引用简化，表达式如下：
       (\d{1,3})(.\1){3}
       简单的解释下，把\d{1,3}放在一组里，表示为(\d{1,3})，它是第1组，(.\1)是第2组，在第2组里通过\1语法，后向引用了第1组的文本内容。
       经过实际测试，会发现这样写是错误的，为什么呢？  错误！ 错误！ 错误！ 错误！
       小菜一直在强调，后向引用，引用的仅仅是文本内容，而不是正则表达式！
       也就是说，组中的内容一旦匹配成功，后向引用，引用的就是匹配成功后的内容，引用的是结果，而不是表达式。
       因此，(\d{1,3})(.\1){3}这个表达式实际上匹配的是四个数都相同的IP地址，比如：123.123.123.123。     

       后向引用 小结
        a、整个表达式永远算作第0组
        b、后向引用，引用的仅仅是文本内容，而不是正则表达式！

      3、不捕获
         不捕获就是在分组的前边加上?:，可以在不需要捕获分组的表达式中使用，加快表达式执行速度。
          就拿匹配<title>xxx</title>标签来说，通过分组可以简写为
          <(title)>.*</\1> 
          但是如果是(?:title),则\1就不能捕获到这个子组了，只能捕获第一个出现的非?:的分组作为\1
          同时注意(?:title)本身会在完整匹配中，只是不在子组中，注意和断言的区别

二、断言
       1、先行还是后发，都是相对于xxx而言的，也就是相对于目标字符串而言。

         a、假如目标字符串后边有条件，可以理解为目标字符串在前，就用先行断言，放在目标字符串之后。
         b、假如目标字符串前边有条件，可以理解为目标字符串在后，就用后发断言，放在目标字符串之前。
         c、假如指定满足某个条件，就是正。
         d、假如指定不满足某个条件，就是负。
        断言只是条件，帮你找到真正需要的字符串，本身并不会匹配！
       2、断言类型
          (?=X )  零宽度正先行断言。仅当子表达式 X 在 此位置的右侧匹配时才继续匹配。例如，/w+(?=/d) 与后跟数字的单词匹配，而不与该数字匹配。此构造不会回溯。
          (?!X)  零宽度负先行断言。仅当子表达式 X 不在 此位置的右侧匹配时才继续匹配。例如，例如，/w+(?!/d) 与后不跟数字的单词匹配，而不与该数字匹配 。
          (?<=X)  零宽度正后发断言。仅当子表达式 X 在 此位置的左侧匹配时才继续匹配。例如，(?<=19)99 与跟在 19 后面的 99 的实例匹配。此构造不会回溯。
          (?<!X)  零宽度负后发断言。仅当子表达式 X 不在此位置的左侧匹配时才继续匹配。例如，(?<!19)99 与不跟在 19 后面的 99 的实例匹配

补充一、

var reg = new Regex(@"a(?=b)c");
var str = "abc";
Console.WriteLine(reg.IsMatch(str));//返回false

      为什么会返回false？
     其实msdn官方定义已经说了，只是它说得很官方而已。这里需要我们注意一个关键点：此位置。没错，是位置而不是字符。那么结合官方定义和第一个例子来理解第二个例子：
     因为a后面是b，则此时返回了匹配内容a（由第一个例子知道，只返回a不返回exp匹配的内容），此时a(?=b)c中的a(?=b)部分已经解决了，接下来要解决c的匹配问题了，此时匹配c要从字符串abc哪里开始呢，结合官方定义，就知道是从子表达的位置向右开始的，那么就是从b的位置开始，但b又不匹配a(?=b)c剩余部分的c，所以abc就不匹配a(?=b)c了。
     那么如果要上面的进行匹配，正则应该如何写呢？
     答案是：a(?=b)bc
     当然，有人会说直接abc就匹配上了，还要这么折腾吗？当然不用这么折腾，只是为了说明零宽度正预测先行断言到底是怎么一回事？关于其它的零宽断言也是同一原理！

三、元字符

常见断言元字符有： \b, \B, \A, \Z, \z, ^ ,$ 它们只是表示特殊位置，各自作用如有字符串AB,带位置表示为：0A1B2

元字符 	意义(以上面带位置字符串说明)
^ 	行首，字符串首 表示位置0
$ 	行尾，字符串尾部，表示位置2
\b 	字分界线，可以表示：0,2位置
\B 	非字分界线，可以表示1位置
\A 	目标的开头（独立于多行模式） 表示位置0
\Z 	目标的结尾或位于结尾的换行符前（独立于多行模式） 表示位置2
\z 	目标的结尾（独立于多行模式）表示位置2
\G 	目标中的第一个匹配位置
A,Z,z,G很少使用